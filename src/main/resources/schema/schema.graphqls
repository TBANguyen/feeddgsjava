scalar Date
scalar DateTime

type Query {
#    Events: [Event]
#    Event(eventId: Int): Event!
    events: [Event!]
    venues: [Venue!]
    organizers: [Organizer!]
    eventgroups: [EventGroup!]

    eventbyid(id: Int): Event
}

type Event {
    id: Int
    primaryEventGroup_id: Int
    organizer_id: Int
    venue_id: Int
    series_id: Int
    date: Date
    modified_since: DateTime
    status: String
    extended: String
    limited: String
#    publicationChannelToken: String

#    eventGroupId: Int
#    organizerId: Int
#    organizerName: String!
#    status: String!
#    nonPrimaryEventGroupIds: [Int]
#    seriesId: Int!
#    name: String
#    type: String!
#    startDate: String
#    doorsOpen: String!
}

enum EventStatus{
    FINAL,
    OPTION,
    TOBECONFIRMED,
    STATUS
}

type Venue{
    id: Int
    organizer_id: Int
    json: String
}

type Organizer{
    id: Int
    json: String
}

type EventGroup{
    id: Int
    organizer_id: Int
    modified_since: DateTime
    extended: String
    limited: String
}
